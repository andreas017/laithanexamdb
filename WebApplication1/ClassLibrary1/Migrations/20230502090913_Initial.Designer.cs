// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Training.Sql.Entity;

#nullable disable

namespace Training.Sql.Entity.Migrations
{
    [DbContext(typeof(CinemaDbContext))]
    [Migration("20230502090913_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Training.Sql.Entity.Entity.Blob", b =>
                {
                    b.Property<Guid>("BlobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("blob_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_name");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_path");

                    b.Property<string>("MIME")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("mime");

                    b.HasKey("BlobId")
                        .HasName("blob_pkey");

                    b.ToTable("blobs", "public");
                });

            modelBuilder.Entity("Training.Sql.Entity.Entity.Cinema", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<Guid?>("BlobId")
                        .IsRequired()
                        .HasColumnType("uuid")
                        .HasColumnName("blob_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("cinema_pkey");

                    b.HasIndex("BlobId")
                        .HasDatabaseName("ix_cinemas_blob_id");

                    b.ToTable("cinemas", "public");
                });

            modelBuilder.Entity("Training.Sql.Entity.Entity.Theatre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CinemaId")
                        .HasColumnType("integer")
                        .HasColumnName("cinema_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("TheatreTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("theatre_type_id");

                    b.HasKey("Id")
                        .HasName("theatre_pkey");

                    b.HasIndex("CinemaId")
                        .HasDatabaseName("ix_theatres_cinema_id");

                    b.HasIndex("TheatreTypeId")
                        .HasDatabaseName("ix_theatres_theatre_type_id");

                    b.ToTable("theatres", "public");
                });

            modelBuilder.Entity("Training.Sql.Entity.Entity.TheatreType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_theatre_types");

                    b.ToTable("theatre_types", "public");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Reguler"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Premium"
                        });
                });

            modelBuilder.Entity("Training.Sql.Entity.Entity.Cinema", b =>
                {
                    b.HasOne("Training.Sql.Entity.Entity.Blob", "Blob")
                        .WithMany("Cinemas")
                        .HasForeignKey("BlobId")
                        .IsRequired()
                        .HasConstraintName("u__blob_fkey");

                    b.Navigation("Blob");
                });

            modelBuilder.Entity("Training.Sql.Entity.Entity.Theatre", b =>
                {
                    b.HasOne("Training.Sql.Entity.Entity.Cinema", "Cinema")
                        .WithMany("Theatres")
                        .HasForeignKey("CinemaId")
                        .IsRequired()
                        .HasConstraintName("t__cinema_fkey");

                    b.HasOne("Training.Sql.Entity.Entity.TheatreType", "TheatreType")
                        .WithMany("Theatres")
                        .HasForeignKey("TheatreTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("t__theatreType_fkey");

                    b.Navigation("Cinema");

                    b.Navigation("TheatreType");
                });

            modelBuilder.Entity("Training.Sql.Entity.Entity.Blob", b =>
                {
                    b.Navigation("Cinemas");
                });

            modelBuilder.Entity("Training.Sql.Entity.Entity.Cinema", b =>
                {
                    b.Navigation("Theatres");
                });

            modelBuilder.Entity("Training.Sql.Entity.Entity.TheatreType", b =>
                {
                    b.Navigation("Theatres");
                });
#pragma warning restore 612, 618
        }
    }
}
